use bitflags::bitflags;

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_derive::*;

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Eq)]
pub struct U64ValueFlags {
    pub value: u64,
    pub max_flags: u8,
    pub flags: Max64Flags,
}

impl U64ValueFlags {
    pub fn from_u64(data: u64, max_flags: u8) -> Self {
        let value = data & ((1 << max_flags) - 1); // low bits -> value
        let flag = (data >> max_flags) as u64; // high bits -> flags

        if max_flags < 64 {
            return U64ValueFlags {
                value,
                max_flags,
                flags: Max64Flags::from_bits_truncate(flag),
            };
        }

        panic!("Unsupported max_flags for u64, max_flags: {max_flags}, allow: [1, 63]")
    }

    pub fn to_u64(&self) -> u64 {
        let flag_bits = self.flags.bits();
        ((flag_bits & ((1 << (64 - self.max_flags)) - 1)) << self.max_flags)
            | (self.value & ((1 << self.max_flags) - 1))
    }
}

bitflags! {
    #[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Eq)]
    #[serde(transparent)]
    pub struct Max64Flags: u64 {
        const BIT_STATUS_00 = 0b0000000000000000000000000000000000000000000000000000000000000001;
        const BIT_STATUS_01 = 0b0000000000000000000000000000000000000000000000000000000000000010;
        const BIT_STATUS_02 = 0b0000000000000000000000000000000000000000000000000000000000000100;
        const BIT_STATUS_03 = 0b0000000000000000000000000000000000000000000000000000000000001000;
        const BIT_STATUS_04 = 0b0000000000000000000000000000000000000000000000000000000000010000;
        const BIT_STATUS_05 = 0b0000000000000000000000000000000000000000000000000000000000100000;
        const BIT_STATUS_06 = 0b0000000000000000000000000000000000000000000000000000000001000000;
        const BIT_STATUS_07 = 0b0000000000000000000000000000000000000000000000000000000010000000;
        const BIT_STATUS_08 = 0b0000000000000000000000000000000000000000000000000000000100000000;
        const BIT_STATUS_09 = 0b0000000000000000000000000000000000000000000000000000001000000000;
        const BIT_STATUS_10 = 0b0000000000000000000000000000000000000000000000000000010000000000;
        const BIT_STATUS_11 = 0b0000000000000000000000000000000000000000000000000000100000000000;
        const BIT_STATUS_12 = 0b0000000000000000000000000000000000000000000000000001000000000000;
        const BIT_STATUS_13 = 0b0000000000000000000000000000000000000000000000000010000000000000;
        const BIT_STATUS_14 = 0b0000000000000000000000000000000000000000000000000100000000000000;
        const BIT_STATUS_15 = 0b0000000000000000000000000000000000000000000000001000000000000000;
        const BIT_STATUS_16 = 0b0000000000000000000000000000000000000000000000010000000000000000;
        const BIT_STATUS_17 = 0b0000000000000000000000000000000000000000000000100000000000000000;
        const BIT_STATUS_18 = 0b0000000000000000000000000000000000000000000001000000000000000000;
        const BIT_STATUS_19 = 0b0000000000000000000000000000000000000000000010000000000000000000;
        const BIT_STATUS_20 = 0b0000000000000000000000000000000000000000000100000000000000000000;
        const BIT_STATUS_21 = 0b0000000000000000000000000000000000000000001000000000000000000000;
        const BIT_STATUS_22 = 0b0000000000000000000000000000000000000000010000000000000000000000;
        const BIT_STATUS_23 = 0b0000000000000000000000000000000000000000100000000000000000000000;
        const BIT_STATUS_24 = 0b0000000000000000000000000000000000000001000000000000000000000000;
        const BIT_STATUS_25 = 0b0000000000000000000000000000000000000010000000000000000000000000;
        const BIT_STATUS_26 = 0b0000000000000000000000000000000000000100000000000000000000000000;
        const BIT_STATUS_27 = 0b0000000000000000000000000000000000001000000000000000000000000000;
        const BIT_STATUS_28 = 0b0000000000000000000000000000000000010000000000000000000000000000;
        const BIT_STATUS_29 = 0b0000000000000000000000000000000000100000000000000000000000000000;
        const BIT_STATUS_30 = 0b0000000000000000000000000000000001000000000000000000000000000000;
        const BIT_STATUS_31 = 0b0000000000000000000000000000000010000000000000000000000000000000;
        const BIT_STATUS_32 = 0b0000000000000000000000000000000100000000000000000000000000000000;
        const BIT_STATUS_33 = 0b0000000000000000000000000000001000000000000000000000000000000000;
        const BIT_STATUS_34 = 0b0000000000000000000000000000010000000000000000000000000000000000;
        const BIT_STATUS_35 = 0b0000000000000000000000000000100000000000000000000000000000000000;
        const BIT_STATUS_36 = 0b0000000000000000000000000001000000000000000000000000000000000000;
        const BIT_STATUS_37 = 0b0000000000000000000000000010000000000000000000000000000000000000;
        const BIT_STATUS_38 = 0b0000000000000000000000000100000000000000000000000000000000000000;
        const BIT_STATUS_39 = 0b0000000000000000000000001000000000000000000000000000000000000000;
        const BIT_STATUS_40 = 0b0000000000000000000000010000000000000000000000000000000000000000;
        const BIT_STATUS_41 = 0b0000000000000000000000100000000000000000000000000000000000000000;
        const BIT_STATUS_42 = 0b0000000000000000000001000000000000000000000000000000000000000000;
        const BIT_STATUS_43 = 0b0000000000000000000010000000000000000000000000000000000000000000;
        const BIT_STATUS_44 = 0b0000000000000000000100000000000000000000000000000000000000000000;
        const BIT_STATUS_45 = 0b0000000000000000001000000000000000000000000000000000000000000000;
        const BIT_STATUS_46 = 0b0000000000000000010000000000000000000000000000000000000000000000;
        const BIT_STATUS_47 = 0b0000000000000000100000000000000000000000000000000000000000000000;
        const BIT_STATUS_48 = 0b0000000000000001000000000000000000000000000000000000000000000000;
        const BIT_STATUS_49 = 0b0000000000000010000000000000000000000000000000000000000000000000;
        const BIT_STATUS_50 = 0b0000000000000100000000000000000000000000000000000000000000000000;
        const BIT_STATUS_51 = 0b0000000000001000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_52 = 0b0000000000010000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_53 = 0b0000000000100000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_54 = 0b0000000001000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_55 = 0b0000000010000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_56 = 0b0000000100000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_57 = 0b0000001000000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_58 = 0b0000010000000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_59 = 0b0000100000000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_60 = 0b0001000000000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_61 = 0b0010000000000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_62 = 0b0100000000000000000000000000000000000000000000000000000000000000;
        const BIT_STATUS_63 = 0b1000000000000000000000000000000000000000000000000000000000000000;
    }
}

pub const U64_FLAG_INDEXES: [Max64Flags; 64] = [
    Max64Flags::BIT_STATUS_00,
    Max64Flags::BIT_STATUS_01,
    Max64Flags::BIT_STATUS_02,
    Max64Flags::BIT_STATUS_03,
    Max64Flags::BIT_STATUS_04,
    Max64Flags::BIT_STATUS_05,
    Max64Flags::BIT_STATUS_06,
    Max64Flags::BIT_STATUS_07,
    Max64Flags::BIT_STATUS_08,
    Max64Flags::BIT_STATUS_09,
    Max64Flags::BIT_STATUS_10,
    Max64Flags::BIT_STATUS_11,
    Max64Flags::BIT_STATUS_12,
    Max64Flags::BIT_STATUS_13,
    Max64Flags::BIT_STATUS_14,
    Max64Flags::BIT_STATUS_15,
    Max64Flags::BIT_STATUS_16,
    Max64Flags::BIT_STATUS_17,
    Max64Flags::BIT_STATUS_18,
    Max64Flags::BIT_STATUS_19,
    Max64Flags::BIT_STATUS_20,
    Max64Flags::BIT_STATUS_21,
    Max64Flags::BIT_STATUS_22,
    Max64Flags::BIT_STATUS_23,
    Max64Flags::BIT_STATUS_24,
    Max64Flags::BIT_STATUS_25,
    Max64Flags::BIT_STATUS_26,
    Max64Flags::BIT_STATUS_27,
    Max64Flags::BIT_STATUS_28,
    Max64Flags::BIT_STATUS_29,
    Max64Flags::BIT_STATUS_30,
    Max64Flags::BIT_STATUS_31,
    Max64Flags::BIT_STATUS_32,
    Max64Flags::BIT_STATUS_33,
    Max64Flags::BIT_STATUS_34,
    Max64Flags::BIT_STATUS_35,
    Max64Flags::BIT_STATUS_36,
    Max64Flags::BIT_STATUS_37,
    Max64Flags::BIT_STATUS_38,
    Max64Flags::BIT_STATUS_39,
    Max64Flags::BIT_STATUS_40,
    Max64Flags::BIT_STATUS_41,
    Max64Flags::BIT_STATUS_42,
    Max64Flags::BIT_STATUS_43,
    Max64Flags::BIT_STATUS_44,
    Max64Flags::BIT_STATUS_45,
    Max64Flags::BIT_STATUS_46,
    Max64Flags::BIT_STATUS_47,
    Max64Flags::BIT_STATUS_48,
    Max64Flags::BIT_STATUS_49,
    Max64Flags::BIT_STATUS_50,
    Max64Flags::BIT_STATUS_51,
    Max64Flags::BIT_STATUS_52,
    Max64Flags::BIT_STATUS_53,
    Max64Flags::BIT_STATUS_54,
    Max64Flags::BIT_STATUS_55,
    Max64Flags::BIT_STATUS_56,
    Max64Flags::BIT_STATUS_57,
    Max64Flags::BIT_STATUS_58,
    Max64Flags::BIT_STATUS_59,
    Max64Flags::BIT_STATUS_60,
    Max64Flags::BIT_STATUS_61,
    Max64Flags::BIT_STATUS_62,
    Max64Flags::BIT_STATUS_63,
];
